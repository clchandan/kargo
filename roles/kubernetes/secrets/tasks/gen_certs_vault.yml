---
- name: gen_certs_vault | Create list of master certs
  set_fact: 
    kube_apiserver_cert_list:
      - "{{ kube_cert_dir }}/apiserver.pem"
    kube_master_cert_list:
      - "{{ kube_cert_dir }}/admin-{{ inventory_hostname }}.pem"
    kube_node_cert_list:
      - "{{ kube_cert_dir }}/node-{{ inventory_hostname }}.pem"

- name: gen_certs_vault | Test if apiserver certificate is expired or will expire in 1h
  command: "openssl x509 -checkend 3600 -noout -in {{ item }}"
  ignore_errors: True
  register: generate_kubeapiserver_certs
  with_items: "{{ kube_apiserver_cert_list }}"

- name: gen_certs_vault | Test if master certificate is expired or will expire in 1h
  command: "openssl x509 -checkend 3600 -noout -in {{ item }}"
  ignore_errors: True
  register: generate_kubemaster_certs
  with_items: "{{ kube_master_cert_list }}"

- name: gen_certs_vault | Test if node certificate is expired or will expire in 1h
  command: "openssl x509 -checkend 3600 -noout -in {{ item }}"
  ignore_errors: True
  register: generate_kubenode_certs
  with_items: "{{ kube_node_cert_list }}"

- name: gen_certs_vault | Read in the local credentials
  slurp:
    src: /etc/vault/roles/kube/userpass
  register: kube_vault_creds_slurp
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: gen_certs_vault | Set facts for read Vault Creds
  set_fact:
    kube_vault_creds: "{{ kube_vault_creds_slurp['content']|b64decode|from_json }}"

- name: gen_certs_vault | Log into Vault and obtain an token
  uri:
    url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}/v1/auth/userpass/login/{{ kube_vault_creds['username'] }}"
    headers:
      Accept: application/json
      Content-Type: application/json
    method: POST
    body_format: json
    body:
      password: "{{ kube_vault_creds['password'] }}"
  environment:
    http_proxy: "{{ uri_proxy_http | default('') }}"
    https_proxy: "{{ uri_proxy_https | default('') }}"
  register: kube_vault_login_result

- name: gen_certs_vault | Set fact for vault_client_token
  set_fact:
    vault_client_token:  "{{ kube_vault_login_result.get('json', {}).get('auth', {}).get('client_token') }}"

- name: gen_certs_vault | Set fact for Vault API token
  set_fact:
    kube_vault_headers:
        Accept: application/json
        Content-Type: application/json
        X-Vault-Token: "{{ vault_client_token }}"
  when: vault_client_token != ""

# Generate apiserver certs
- include: ../../vault/tasks/shared/issue_cert.yml
  vars:
    issue_cert_alt_names:
      - "{{ inventory_hostname }}"
      - "kubernetes.default.svc.{{ cluster_name }}"
      - "kubernetes.default.svc"
      - "kubernetes.default"
      - "kubernetes"
      - "localhost"
    issue_cert_copy_ca: "false"
    issue_cert_file_group: "{{ kube_cert_group }}"
    issue_cert_file_owner: kube
    issue_cert_headers: "{{ kube_vault_headers }}"
    issue_cert_hosts: "{{ inventory_hostname  }}"
    issue_cert_ip_sans:
      - "{{ ansible_default_ipv4.address }}"
      - "{{ kube_apiserver_ip }}"
      - "127.0.0.1"
      - "::1"
    issue_cert_path: "{{ item['item'] }}"
    issue_cert_role: kube
    issue_cert_url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}"
  with_items: "{{ generate_kubeapiserver_certs['results'] }}"
  when: inventory_hostname in groups['kube-master'] and item['rc'] == 1

# Generate kube-master certs ( admin )
- include: ../../vault/tasks/shared/issue_cert.yml
  vars:
    issue_cert_alt_names:
      - "{{ inventory_hostname }}"
      - "localhost"
    issue_cert_copy_ca: "false"
    issue_cert_file_group: "{{ kube_cert_group }}"
    issue_cert_file_owner: kube
    issue_cert_headers: "{{ kube_vault_headers }}"
    issue_cert_hosts: "{{ inventory_hostname  }}"
    issue_cert_ip_sans:
      - "{{ ansible_default_ipv4.address }}"
      - "127.0.0.1"
      - "::1"
    issue_cert_path: "{{ item['item'] }}"
    issue_cert_role: kube
    issue_cert_url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}"
  with_items: "{{ generate_kubemaster_certs['results'] }}"
  when: inventory_hostname in groups['kube-master'] and item['rc'] == 1

# Generate kubelet node certs
- include: ../../vault/tasks/shared/issue_cert.yml
  vars:
    issue_cert_alt_names:
      - "{{ inventory_hostname }}"
      - "localhost"
    issue_cert_copy_ca: "false"
    issue_cert_file_group: "{{ kube_cert_group }}"
    issue_cert_file_owner: kube
    issue_cert_headers: "{{ kube_vault_headers }}"
    issue_cert_hosts: "{{ inventory_hostname  }}"
    issue_cert_ip_sans:
      - "{{ ansible_default_ipv4.address }}"
      - "127.0.0.1"
      - "::1"
    issue_cert_path: "{{ item['item'] }}"
    issue_cert_role: kube
    issue_cert_url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}"
  with_items: "{{ generate_kubenode_certs['results'] }}"
  when: item['rc'] == 1
