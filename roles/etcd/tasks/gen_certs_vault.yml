---
- name: gen_certs_vault | Create list of master certs
  set_fact:
    etcd_master_cert_list:
      - "{{ etcd_cert_dir }}/admin-{{ inventory_hostname }}.pem"
      - "{{ etcd_cert_dir }}/member-{{ inventory_hostname }}.pem"
    etcd_node_cert_list:
      - "{{ etcd_cert_dir }}/node-{{ inventory_hostname }}.pem"

- name: gen_certs_vault | Test if master certificate is expired or will expire in 1h
  command: "openssl x509 -checkend 3600 -noout -in {{ item }}"
  ignore_errors: True
  register: generate_master_certs
  with_items: "{{ etcd_master_cert_list }}"

- name: gen_certs_vault | Test if node certificate is expired or will expire in 1h
  command: "openssl x509 -checkend 3600 -noout -in {{ item }}"
  ignore_errors: True
  register: generate_node_certs
  with_items: "{{ etcd_node_cert_list }}"

- name: gen_certs_vault | Read in the local credentials
  slurp:
    src: /etc/vault/roles/etcd/userpass
  register: etcd_vault_creds_slurp
  delegate_to: "{{ groups['etcd'][0] }}"

- name: gen_certs_vault | Set facts for read Vault Creds
  set_fact:
    etcd_vault_creds: "{{ etcd_vault_creds_slurp['content']|b64decode|from_json }}"

- name: gen_certs_vault | Log into Vault and obtain an token
  uri:
    url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}/v1/auth/userpass/login/{{ etcd_vault_creds['username'] }}"
    headers:
      Accept: application/json
      Content-Type: application/json
    method: POST
    body_format: json
    body:
      password: "{{ etcd_vault_creds['password'] }}"
  environment:
    http_proxy: ""
    https_proxy: ""
  register: etcd_vault_login_result

- name: gen_certs_vault | Set fact for vault_client_token
  set_fact:
    vault_client_token:  "{{ etcd_vault_login_result.get('json', {}).get('auth', {}).get('client_token') }}"

- name: gen_certs_vault | Set fact for Vault API token
  set_fact:
    etcd_vault_headers:
        Accept: application/json
        Content-Type: application/json
        X-Vault-Token: "{{ vault_client_token }}"
  when: vault_client_token != ""

- include: ../../vault/tasks/shared/issue_cert.yml
  vars:
    issue_cert_alt_names: [ "{{ inventory_hostname }}", 'localhost' ]
    issue_cert_copy_ca: "false"
    issue_cert_file_group: "{{ etcd_cert_group }}"
    issue_cert_file_owner: kube
    issue_cert_headers: "{{ etcd_vault_headers }}"
    issue_cert_hosts: "{{ inventory_hostname  }}"
    issue_cert_ip_sans: [ "{{ ansible_default_ipv4.address }}", "127.0.0.1","::1" ]
    issue_cert_path: "{{ item['item'] }}"
    issue_cert_role: etcd
    issue_cert_url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}"
  with_items: "{{ etcd_master_certs_needed|d([]) }}"
  when: inventory_hostname in groups.etcd
  notify: set etcd_secret_changed

- include: ../../vault/tasks/shared/issue_cert.yml
  vars:
    issue_cert_alt_names: [ "{{ inventory_hostname }}", 'localhost' ]
    issue_cert_copy_ca: "false"
    issue_cert_file_group: "{{ etcd_cert_group }}"
    issue_cert_file_owner: kube
    issue_cert_headers: "{{ etcd_vault_headers }}"
    issue_cert_hosts: "{{ inventory_hostname  }}"
    issue_cert_ip_sans: [ "{{ ansible_default_ipv4.address }}", "127.0.0.1","::1" ]
    issue_cert_path: "{{ item['item'] }}"
    issue_cert_role: etcd
    issue_cert_url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}"
   with_items: "{{ generate_node_certs['results'] }}"
   when: item['rc'] == 1
  notify: set etcd_secret_changed
